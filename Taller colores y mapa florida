{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled7.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyOs2Cg4PXhZ5Ubnq0kT33R/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sbustos497/cd_202202_Santiago_Bustos/blob/master/Taller%20colores%20y%20mapa%20florida\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import colorsys\n",
        "import math "
      ],
      "metadata": {
        "id": "cy0RyUUib6Ws"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "id": "YwI1CSXYbhDV"
      },
      "outputs": [],
      "source": [
        "def generar_gama(ri,gi,bi,rf,gf,bf,cantidad):\n",
        "  hsvi = colorsys.rgb_to_hsv(ri/255,gi/255,bi/255)\n",
        "  hsvf = colorsys.rgb_to_hsv(rf/255,gf/255,bf/255)\n",
        "\n",
        "  pasoh = (hsvf[0]- hsvi[0])/(cantidad - 1)\n",
        "  pasos= (hsvf[1]- hsvi[1])/(cantidad - 1)\n",
        "  pasov = (hsvf[2]- hsvi[2])/(cantidad - 1)\n",
        "\n",
        "  listaRGB = []\n",
        "\n",
        "  listaRGB.append((ri/255,gi/255,bi/255))\n",
        "\n",
        "  for i in range(cantidad - 1):\n",
        "    h = hsvi[0] + pasoh * (i + 1)\n",
        "    s = hsvi[1] + pasos * (i + 1)\n",
        "    v = hsvi[2] + pasov * (i + 1)\n",
        "\n",
        "    rgb = colorsys.hsv_to_rgb(h,s,v)\n",
        "    #listaRGB.append([round( rgb[0] * 255 , 0),round( rgb[1] * 255 , 0), round(rgb[2] * 255 , 0)] )\n",
        "    listaRGB.append(rgb)\n",
        "\n",
        "  \n",
        "  return listaRGB\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gama = generar_gama(255,0,0,255,255,0,10)\n",
        "gama"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xwxsg8UMcW7z",
        "outputId": "fda971ea-e027-4696-8eef-b3c32ef3b325"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(1.0, 0.0, 0.0),\n",
              " (1.0, 0.11111111111111116, 0.0),\n",
              " (1.0, 0.2222222222222222, 0.0),\n",
              " (1.0, 0.33333333333333326, 0.0),\n",
              " (1.0, 0.4444444444444444, 0.0),\n",
              " (1.0, 0.5555555555555556, 0.0),\n",
              " (1.0, 0.6666666666666666, 0.0),\n",
              " (1.0, 0.7777777777777777, 0.0),\n",
              " (1.0, 0.8888888888888888, 0.0),\n",
              " (1.0, 1.0, 0.0)]"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.patches as patches\n",
        "import matplotlib.colors as color\n"
      ],
      "metadata": {
        "id": "dOGgplC1gN2R"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fig = plt.figure()\n",
        "ax = fig.add_subplot(111)\n",
        "\n",
        "count = len(gama)\n",
        "\n",
        "x=0\n",
        "y=0\n",
        "h=1/count\n",
        "\n",
        "\n",
        "for cl in gama:\n",
        "  pos = (x / count, y/count)\n",
        "  ax.add_patch(patches.Rectangle(pos,1,h,color=cl))\n",
        "  if y >= count-1:\n",
        "    x+=1\n",
        "    y=0\n",
        "  else:\n",
        "    y +=1\n",
        "\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "gJfkFHqniiQ1",
        "outputId": "a55b7366-9a18-4062-bbb6-ca50897e6c2e"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}